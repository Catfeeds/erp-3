<?php
/**
 * Created by liuruibin.
 * User: liuruibin
 * Date: 2017/11/14
 * Time: 15:04
 * Remark: 登录管理
 */

namespace User\Controller;
use Common\Controller\AdminbaseController;
use QL\QueryList;
use Symfony\Component\Yaml\Tests\DumperTest;

class LoginmanageController extends AdminbaseController
{
    /** @var  \Think\Model */
    protected $login_auth_model,$auth_apply_model;

    /** @var  \Think\Model */
    protected $depart_users_model;

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->login_auth_model = D('Common/LoginAuthIp');
        $this->auth_apply_model = D('Common/LoginAuthApply');
        $this->depart_users_model = D('Common/DepartmentUsers');
        $this->page =$_SESSION['set_page_row']?(int)$_SESSION['set_page_row']:20;
    }

    /**
     * 设置IP地址段页面
     */
    public function setting_addf(){
        $id_auth = intval(I('get.id'));
        if($id_auth){
            $loginAuthInfo = $this->login_auth_model->alias('la')
                ->field('la.*,dt.title')
                ->join('__DEPARTMENT__ dt on la.id_department = dt.id_department')
                ->find($id_auth);
            if($loginAuthInfo){
                $userInfo = D('Common/Users')->find($loginAuthInfo['id_users']);
                if(!$userInfo){
                    $this->error('不存在该用户',U('Loginmanage/addf_list'));
                }
            }
        }
        $depart = D("Common/Department")->select();
        $this->assign(compact('depart','loginAuthInfo','userInfo'));
        $this->display();

    }

    /**
     * IP地址段设置-提交
     */
    public function setting_addf_save(){
        set_time_limit(60);
        $post = I('post.');
        if(isset($post['id_auth']) && $post['id_auth']){
            //单个编辑
            $loginIPInfo = $this->login_auth_model->find($post['id_auth']);
            if($loginIPInfo){
                if($loginIPInfo['ip_addf'] != $post['ip_addf']){
                    $data['id_department'] = $post['id_department'];
                    $data['id_users'] = $post['id_users'];
                    $data['ip_addf'] = $post['ip_addf'];
                    $where = $data;
                    $loginIPIs = $this->login_auth_model->where($where)->find();
                    if($loginIPIs){
                        $this->error("该用户已存在【{$post['ip_addf']}】IP段",U('Loginmanage/setting_addf',array('id'=> $post['id_auth'])));
                    }
                }
                $data['non_lan_start'] = strtotime($post['start_time']);
                $data['non_lan_end'] = strtotime($post['end_time']);
                $this->login_auth_model->where('id_auth = '.$post['id_auth'])->save($data);
                $this->success("编辑成功",U('Loginmanage/setting_addf',array('id'=> $post['id_auth'])));
            } else {
                $this->error("不存在此记录",U('Loginmanage/setting_addf',array('id'=> $post['id_auth'])));
            }
        }else{
            //新增设置IP操作
            $where = array();
            //部门ID是否为所有
            if(isset($post['id_department']) && $post['id_department']){
                $where['du.id_department'] = intval($post['id_department']);
            }
            if(isset($post['id_users']) && $post['id_users']){
                $where['du.id_users'] = intval($post['id_users']);
            }

            $data['ip_addf'] = $post['ip_addf'];
            $data['non_lan_start'] = strtotime($post['start_time']);
            $data['non_lan_end'] = strtotime($post['end_time']);

            $whereLg['la.ip_addf'] = $post['ip_addf'];
            $id_departmetnt_user = $this->login_auth_model->alias('la')->where($whereLg)->getField('id_department_users',true);
            if($id_departmetnt_user){
                $where['du.id_department_users'] = array('NOT IN',implode(',',$id_departmetnt_user));
            }
            $departUserRs = $this->depart_users_model->alias('du')->where($where)->select();
            //如果存在的，证明还有部门的人员没有添加，直接添加到IP表里面
            if($departUserRs){
                //循环添加到IP表里面
                foreach($departUserRs as $val){
                    $data['id_department'] = $val['id_department'];
                    $data['id_users'] = $val['id_users'];
                    $data['id_department_users'] = $val['id_department_users'];
                    $this->login_auth_model->add($data);
                }
            }

            $str = '';
            unset($where['du.id_department_users']);//这里销毁之前查询部门用户表的条件
            $where['du.ip_addf'] = $post['ip_addf'];
            foreach ($where as $k => $v) {
                $str .= ' and ' .$k . '=' . $v .' ';
            }
            $sql = "UPDATE erp_login_auth_ip du, erp_department_users t1 set du.ip_addf='{$data['ip_addf']}' ,du.non_lan_start='{$data['non_lan_start']}',du.non_lan_end='{$data['non_lan_end']}' where du.id_department_users = t1.id_department_users ".$str;
            $Model = new \Think\Model();
            $Model->execute($sql);
            $this->success("设置成功",U('Loginmanage/setting_addf'));
        }

    }

    /**
     * IP地址段列表
     */
    public function addf_list(){
        //根据用户名搜索   liuruibin   20171124
        if(isset($_GET['user_login']) && $_GET['user_login']){
            $user_login = $_GET['user_login'];
            $where_name['u.user_login'] = array('like', "%$user_login%");
            $where_name['u.user_nicename'] = array('like', "%$user_login%");
            $where_name['_logic'] = 'or';
            $where['_complex'] = $where_name;
        }
        //根据部门搜索    liuruibin   20171127
        if(isset($_GET['id_department']) && $_GET['id_department']){
            $where['dt.id_department'] = array('EQ',$_GET['id_department']);
        }
        //根据IP段查询
        if(isset($_GET['ip_addf']) && $_GET['ip_addf']){
            $where['la.ip_addf'] = $_GET['ip_addf'];
        }
        $count = $this->login_auth_model->alias('la')
            ->join('__DEPARTMENT__ AS dt ON la.id_department = dt.id_department','LEFT')
            ->join('__USERS__ AS u ON u.id = la.id_users','LEFT')
            ->where($where)
            ->count();
        $page = $this->page($count,20);
        $lists = $this->login_auth_model->alias('la')
            ->field('la.*,dt.title,u.user_nicename')
            ->join('__DEPARTMENT__ AS dt ON la.id_department = dt.id_department','LEFT')
            ->join('__USERS__ AS u ON u.id = la.id_users','LEFT')
            ->where($where)
            ->limit($page->firstRow,$page->listRows)->select();
        $groupIP = $this->login_auth_model->field('ip_addf')->group('ip_addf')->select();
        $depart = D("Common/Department")->select();
        $this->assign(compact('lists','depart','groupIP'));
        $this->assign("Page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 删除部门用户对应的IP段记录
     */
    public function delete_addf_info(){
        $id = isset($_POST['id']) && $_POST['id'] ? intval($_POST['id']):'';
        if(!$id) {
            $flag = 1;
            $message = 'ID不能为空';
            echo json_encode(array('flag' => $flag, 'msg' => $message));exit;
        }
        $login_auth_info = $this->login_auth_model->find($id);
        if(!$login_auth_info){
            $flag = 1;
            $message = '找不到相关记录';
            echo json_encode(array('flag' => $flag, 'msg' => $message));exit;
        }
        $result = $this->login_auth_model->where('id_auth = '.$id)->delete();
        if($result){
            $flag = 0;
            $message = '删除成功';
            echo json_encode(array('flag' => $flag, 'msg' => $message));exit;
        }else{
            $flag = 1;
            $message = '删除失败';
            echo json_encode(array('flag' => $flag, 'msg' => $message));exit;
        }
    }

    /**
     * 申请权限表单页
     */
    public function apply_auth(){
        //获取当前用户的所在部门
        $depart = $this->getAllDepartment();
        $userInfo = D('Common/Users')->field('id,user_nicename')->find($_SESSION['ADMIN_ID']);
        $this->assign(compact('depart','userInfo'));
        $this->display();
    }

    /**
     * 异步提交申请权限
     */
    public function save_apply_post(){
        $post = I('post.');
        $date_now = date('Y-m-d H:i');
        //申请的使用时间要大于当前的时间
        if($post['start_time'] <= $date_now){
            $info = array(
                'status' => 1,
                'message' => '申请的使用时间要大于当前日期'
            );
            echo json_encode($info);exit();
        }
        $data['id_department'] = $post['id_department'];
        $data['id_users'] = $post['id_users'];
        $data['use_start_time'] = strtotime($post['start_time']);
        $data['use_end_time'] = strtotime($post['end_time']);
        $data['apply_reson'] = $post['apply_reson'];
        $data['create_time'] = strtotime(date('Y-m-d H:i:s'));

        //判断是否在允许申请的时间段内
        $whereLoginIp['id_department'] = $data['id_department'];
        $whereLoginIp['id_users'] = $data['id_users'];
        $result = $this->login_auth_model->where($whereLoginIp)->find();
        if(!$result){
            $info = array(
                'status' => 1,
                'message' => '没有申请的权限'
            );
            echo json_encode($info);exit();
        }else if($data['use_start_time'] < $result['non_lan_start'] || $result['non_lan_end'] < $data['use_end_time']){
            $info = array(
                'status' => 1,
                'message' => '申请时间超出规定时间'
            );
            echo json_encode($info);exit();
        }

        $userInfo = D('Common/Users')->find($data['id_users']);
        if(!$userInfo){
            $info = array(
                'status' => 1,
                'message' => '操作失败，没有对应的用户ID'
            );
            echo json_encode($info);exit();
        }
        //开始使用时间已经存在申请的时间范围内
        $start_time[] = array('EGT', $data['use_start_time']);
        $start_time[] = array('LT' , $data['use_end_time']);
        //结束时间已经存在申请的时间范围内
        $where['use_start_time'] =  $start_time;
        $end_time[] = array('EGT' , $data['use_start_time']);
        $end_time[] = array('LT' , $data['use_end_time']);
        $where['use_end_time'] = $end_time;
        $where['_logic'] = 'or';
        //复合查询，时间采用OR查询，其它用AND查询
        $map['_complex'] = $where;
        $map['id_department'] = array('EQ',$data['id_department']);
        $map['id_users'] = array('EQ',$data['id_users']);
        $map['director_status'] = array('IN','1,2');
        $authApplyInfo = $this->auth_apply_model->where($map)->find();
        //同个部门同个用户，不能在同一个时间段内申请多条
        if($authApplyInfo){
            $info = array(
                'status' => 1,
                'message' => '该时间段已经提交过申请'
            );
            echo json_encode($info);exit();
        }

        //判断是否为主管,主管提交直接到研发部审核，主管审核状态为通过
        $is_director = $this->getIsDirector();
        if($is_director){
            $data['director_status'] = 2;
        }
        $return_id = $this->auth_apply_model->add($data);
        if(!$return_id){
            $info = array(
                'status' => 1,
                'message' => '添加数据失败'
            );
            echo json_encode($info);exit();
        }
        $info = array(
            'status' => 0,
            'message' => '操作成功'
        );
        /*if($return_id){
            $info['id_return'] = $return_id;
        }*/
        echo json_encode($info);exit();
    }

    /**
     * 申请结果
     */
    public function apply_result(){
        $get_admin_id = $_SESSION['ADMIN_ID'];
        //开始，按照各自申请，看结果信息
        $where['la.id_users'] = array('EQ',$get_admin_id);
        //根据申请时间去匹配
        if(isset($_GET['start_time']) && $_GET['start_time']){
            $where['la.create_time'] = array('BETWEEN',[strtotime($_GET['start_time']),strtotime($_GET['end_time'])]);
        }
        $count = $this->auth_apply_model->alias('la')
            ->join('__DEPARTMENT__ AS dt ON la.id_department = dt.id_department','LEFT')
            ->join('__USERS__ AS u ON u.id = la.id_users','LEFT')
            ->where($where)->count();
        $page = $this->page($count,20);
        $lists = $this->auth_apply_model->alias('la')
            ->field('la.*,dt.title,u.user_nicename')
            ->join('__DEPARTMENT__ AS dt ON la.id_department = dt.id_department','LEFT')
            ->join('__USERS__ AS u ON u.id = la.id_users','LEFT')
            ->where($where)->order('la.id_apply desc')->limit($page->firstRow,$page->listRows)->select();
        $status = $this->returnStatus();

        $this->assign(compact('lists','status'));
        $this->display();
    }

    /**
     * 申请审核列表
     */
    public function apply_check_list(){
        $is_director = $this->getIsDirector();
        $is_technology = $this->getIsTechnology();
        if($is_director === false && $is_technology === false){
            $this->error('非主管和研发部人员',U('Loginmanage/apply_auth'));
        }
        //技术部[研发部]
        if($is_technology){
            //研发部筛选一级审核已通过的
            $where['la.director_status'] = array('EQ',2);
            //研发部 只查询二级审核状态的数据
            if(isset($_GET['status']) && $_GET['status']){
                $deve_status = intval($_GET['status']);
                $where['la.developing_status'] = array('EQ',$deve_status);
            }
        }
        //非研发部的部门主管
        if($is_technology === false && $is_director){
            //部门主管筛选自己部门下的申请记录
            $id_department = D('Common/Department')->where('id_users = '.$is_director)->getField('id_department');
            $where['la.id_department'] = array('EQ',$id_department);
            //部门主管 只查询一级审核状态的数据
            if(isset($_GET['status']) && $_GET['status']){
                $deve_status = intval($_GET['status']);
                $where['la.director_status'] = array('EQ',$deve_status);
            }
        }

        //部门查询
        if(isset($_GET['depart_id']) && $_GET['depart_id']){
            $id_department = $_GET['depart_id'];
            $where['la.id_department'] = array('EQ',$id_department);
        }

        //申请人名称 -- 查询
        if(isset($_GET['user_nicename']) && $_GET['user_nicename']){
            $where['u.user_nicename'] = array('LIKE',"%{$_GET['user_nicename']}%");
        }
        //申请的时间 -- 查询
        if(isset($_GET['start_time']) && $_GET['start_time']){
            $where['la.create_time'] = array('BETWEEN',[strtotime($_GET['start_time']),strtotime($_GET['end_time'])]);
        }
        //获取当前用户的所有部门
        $depart = $this->getAllDepartment();

        $count = $this->auth_apply_model->alias('la')
            ->join('__USERS__ u ON la.id_users = u.id','LEFT')
            ->join('__DEPARTMENT__ dt ON la.id_department = dt.id_department','LEFT')
            ->where()->count();
        $page = $this->page($count,20);
        $lists = $this->auth_apply_model->alias('la')
            ->field('u.user_nicename,dt.title,la.*')
            ->join('__USERS__ u ON la.id_users = u.id','LEFT')
            ->join('__DEPARTMENT__ dt ON la.id_department = dt.id_department','LEFT')
            ->where($where)->order('id_apply desc')->limit($page->firstRow,$page->listRows)->select();

        //状态
        $status = $this->returnStatus();
        //状态下拉框
        $select_status = array(
            array('id_status'=>1,'name_status'=>'待审核'),
            array('id_status'=>2,'name_status'=>'审核通过'),
            array('id_status'=>3,'name_status'=>'审核拒绝')
        );
        $this->assign(compact('lists','depart','status','is_technology','select_status'));
        $this->display();
    }

    /**
     * 批量审核申请单
     */
    public function apply_approval(){
        $id_apply = $_POST['id_apply'];
        $check = $_POST['check'];
        $is_director = $this->getIsDirector();
        $is_technology = $this->getIsTechnology();
        $id_apply = explode(',',$id_apply);
        //选择审核通过
        if($check == 'pass'){
            if($is_technology === false && $is_director){
                //部门主管审核
                $data['director_status'] = 2;//审核拒绝
            }else if($is_technology){
                //研发部主管审核
                $data['developing_status'] = 2;//审核拒绝
            }
        }elseif ($check == 'refuse') {
            if($is_technology === false && $is_director){
                //部门主管审核
                $data['director_status'] = 3;//一级审核拒绝
                $data['developing_status'] = 3;//二级审核拒绝
            }else if($is_technology){
                //研发部主管审核
                $data['developing_status'] = 3;//审核拒绝
            }
            $data['remark'] = $_REQUEST['reason'];//拒绝原因
        }
        if($data){
            $result = $this->auth_apply_model->where(array('id_apply' => array('IN',$id_apply)))->save($data);
        }
        if ($result) {
            $flag = 0;
            $msg = '审核完成';
        } else {
            $flag = 1;
            $msg = '审核失败';
        }
        echo json_encode(array('flag' => $flag, 'msg' => $msg));
        exit;

    }

    /**
     * 登录限制开关
     */
    public function setting_open(){
        $depart = D("Common/Department")->select();
        $this->assign(compact('depart'));
        $this->display();
    }

    /**
     * 登录限制开关 -- 保存设置
     */
    public function setting_open_save(){
        $post = I('post.');
        $this->login_auth_model->create($post);
        $where = array();
        //部门ID是否为所有
        if(isset($post['id_department']) && $post['id_department']){
            $where['id_department'] = array('EQ',intval($post['id_department']));
        }
        if(isset($post['id_users']) && $post['id_users']){
            $where['id_users'] = array('EQ',intval($post['id_users']));
        }
        $data['is_allow_other'] = isset($post['is_allow_other'])?1:0;//其他IP登录 1允许0不允许
        $login_auth_rs = $this->login_auth_model->where($where)->select();
        if($login_auth_rs){
            $this->login_auth_model->where($where)->save($data);
            $this->success("设置成功",U('Loginmanage/setting_open'));
        }
        else{
            $this->success("没有对应的用户数据可设置",U('Loginmanage/setting_open'));
        }
    }

    /**
     * 系统设置开关
     */
    public function system_setting(){
        $login_setting_info = M('LoginSetting')->where('auth_model = "login"')->find();
        $this->assign('login_setting_info',$login_setting_info);
        $this->display();
    }

    /**
     * 系统登录限制开关设置保存
     */
    public function system_setting_save(){
        $login_setting_info = M('LoginSetting')->where('auth_model = "login"')->find();
        $data['is_open'] = isset($_POST['is_open']) ? $_POST['is_open'] : 0;
        if($login_setting_info){
            //直接更新
            $result = M('LoginSetting')->where('id_setting = '.$login_setting_info['id_setting'])->save($data);
        }
        else{
            $data['auth_model'] = "login";
            $result = M('LoginSetting')->add($data);
        }
        if($result){
            $this->success('设置成功',U('Loginmanage/system_setting'));
        }
        else{
            $this->success('设置失败',U('Loginmanage/system_setting'));
        }
    }

    /**
     * AJAX异步联动：根据部门ID获取，关联部门用户选择下拉框
     */
    public function get_user(){
        $id_department = $_REQUEST['id_department'];
        $where = array('du.id_department' => $id_department);
        $userResult = D('Common/Users')->alias('u')
            ->field('u.id,u.user_nicename')
            ->join('__DEPARTMENT_USERS__ as du on u.id=du.id_users','left')
            ->where($where)->select();
        echo json_encode($userResult);
    }

    /**
     * 获取当前登录用户的所在部门
     */
    public function getAllDepartment(){
        $id_department = $_SESSION['department_id'];
        $count_id_dt = count($id_department);
        //当前登录用户所在部门只有一个，为业务部门
        if($count_id_dt == 1) {
            $where['id_department'] = array('EQ', implode(',',$id_department));
            $where['type'] = array('EQ', 1);//类型为 1 ，是业务部门
            //查询业务部门的信息
            $depart_info = D('Common/Department')->where($where)->find();

            //当前部门(小组)的父级不为 0 ，为部门以下的部门小组，直接筛选对应的主部门
            if($depart_info['parent_id'] != 0){
                $where['id_department'] = array('EQ', $depart_info['parent_id']);
            }
        }else{
            //非业务部门的，返回当前登录用户的所有一级部门
            $where['id_department'] = array('IN', $id_department);
            $where['parent_id'] = array('EQ',0);
        }
        $all_depart = D('Common/Department')->where($where)->getField('id_department,title,parent_id',true);
        return $all_depart;
    }

    /**
     * 判断当前用户是否为部门主管
     */
    public function getIsDirector(){
        //获取当前用户
        $current_user_id = $_SESSION['ADMIN_ID'];
        $department_id = implode(',',$_SESSION['department_id']);
        $where['id_department'] = array('IN',$department_id);
        $where['parent_id'] = array('EQ',0);//父级ID为0，为一级部门
        //当前部门对应的用户ID
        $depart_user_id = D('Common/Department')->where($where)->getField('id_users');

        //获取的用户ID与当前的用户匹配一致 ， 为主管
        if($current_user_id == $depart_user_id){
            return $current_user_id;
        }else{
            return false;
        }
    }

    /**
     * 判断当前用户是否为技术部(研发部)
     */
    public function getIsTechnology(){
        $current_user_id = $_SESSION['ADMIN_ID'];
        //部门ID为[21]的是技术部门[研发部]
        $where['id_department'] = array('EQ',21);
        $where['id_users'] = array('EQ',$current_user_id);
        $departInfo = D('Common/DepartmentUsers')->where($where)->find();
        if($departInfo){
            return $current_user_id;
        }else{
            return false;
        }
    }

    /**
     * 返回审核状态备注
     */
    public function returnStatus(){
        $return_status = array(
            1 => '未审核',
            2 => '审核通过',
            3 => '拒绝'
        );
        return $return_status;
    }
}