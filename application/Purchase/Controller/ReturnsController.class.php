<?php

namespace Purchase\Controller;

use Common\Controller\AdminbaseController;
use Order\Lib\OrderStatus;
use Common\Lib\SearchData;
use Purchase\Lib\PurchaseStatus;
use Common\Model\ReturnGoodsModel;

/**
 * Created by PhpStorm.
 * Date: 2017/10/31
 * Time: 17:49
 */
/**
 * 采购退货管理
 * Class IndexController
 * @package Product\Controller
 */


class ReturnsController extends AdminbaseController
{
    /**
     * @var \Model|\Think\Model
     */
    public $ReturnGoods;
    public $return_goods_item;
    public $PurchaseIn;
    protected $Purchase, $Users;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->Users = D('Common/Users');
        $this->PurchaseIn = D('Common/PurchaseIn');
        $this->PurchaseInitem = D('Common/PurchaseInitem');
        $this->PurchaseProduct = D('Common/PurchaseProduct');
        $this->return_goods_item = D('ReturnGoodsItem');
        $this->Purchase = D("Purchase");
        $this->ReturnGoods = D('ReturnGoods');
        $this->page = $_SESSION['set_page_row'] ? (int)$_SESSION['set_page_row'] : 20;
        $this->time_start = I('get.start_time', date('Y-m-d 00:00', strtotime('-7 day')));
        $this->time_end = I('get.end_time', date('Y-m-d 00:00', strtotime('+1 day')));
    }

    /**
     * 创建退货单列表
     */
    public function index()
    {
        $_GET['start_time'] = $this->time_start;
        $_GET['end_time'] = $this->time_end;

        $warehouse = M('Warehouse')->field('id_warehouse,title')->where('status=1')->select();
        $supplier = M('Supplier')->getField('id_supplier,title');
        $warehouse = array_column($warehouse, 'title', 'id_warehouse');
        //部门-筛选
        if (isset($_GET['depart_id']) && $_GET['depart_id']) {
            $where['pi.id_department'] = array('EQ', $_GET['depart_id']);
        }
        //仓库-筛选
        if (isset($_GET['ware_id']) && $_GET['ware_id']) {
            $where['pi.id_warehouse'] = array('EQ', $_GET['ware_id']);
        }
        //入库状态-筛选
        if (isset($_GET['status']) && $_GET['status']) {
            $where['pi.status'] = array('EQ', $_GET['status']);
        }
        //采购时间-筛选
        $createAtArray = array();
        if (isset($_GET['start_time']) && $_GET['start_time']) {
            $createAtArray[] = array('EGT', $_GET['start_time']);
            if ($_GET['end_time']) {
                $createAtArray[] = array('LT', $_GET['end_time']);
            }
        } else {
            $createAtArray[] = array('EGT', date('Y-m-d', strtotime('-7 days')));
            $createAtArray[] = array('LT', date('Y-m-d', strtotime('+1 day')));
        }
        if (!empty($createAtArray))
            $where['pe.inner_purchase_time'] = $createAtArray;
        //采购单号-查询
        if (isset($_GET['purchase_no']) && $_GET['purchase_no']) {
            $pur_num = trim($_GET['purchase_no']);
            $where['pi.purchase_no'] = array('like', "%{$pur_num}%");
        }
        //内部采购单号-查询
        if (isset($_GET['inner_purchase_no']) && $_GET['inner_purchase_no']) {
            $inner_purchase_no = trim($_GET['inner_purchase_no']);
            $where['pi.inner_purchase_no'] = array('like', "%{$inner_purchase_no}%");
        }
        //采购渠道订单号-查询[阿里巴巴渠道]
        if (isset($_GET['alibaba_no']) && $_GET['alibaba_no']) {
            $alibaba_no = trim($_GET['alibaba_no']);
            $where['pi.alibaba_no'] = array('like', "%{$alibaba_no}%");
        }
        //sku-查询
        if (isset($_GET['sku']) && $_GET['sku']) {
            $id_purchase = M('PurchaseProduct')->alias('pp')
                ->field('id_purchase')
                ->join('__PRODUCT_SKU__ ps on ps.id_product_sku = pp.id_product_sku')
                ->where(array('sku' => $_GET['sku']))
                ->getField('id_purchase', true);
            $new = '';
            foreach ($id_purchase as $k => $v) {
                $new .= 'pi.id_erp_purchase = ' . $v . ' OR ';
            }
            if (!empty($id_purchase)) {
                $where[] = substr($new, 0, -3);
            } else {
                //为空就找不到
                $where['pi.id_erp_purchase'] = -1;
            }
        }
        //采购员-筛选
        if (isset($_GET['shop_id']) && $_GET['shop_id']) {
            $where['pi.id_users'] = array('EQ', $_GET['shop_id']);
        }
        //产品内部名
        if (isset($_GET['inner_name']) && $_GET['inner_name']) {
            $inner_name = $_GET['inner_name'];
            $where['p.inner_name'] = array('like', "%{$inner_name}%");
        }
        //查询部门信息
        $department = M('Department')->where(array('id_users' => $user_id))->find();
        $users = M('Users')->field('id,user_nicename')->where(array('superior_user_id' => $user_id))->select();
        $users = array_column($users, 'user_nicename', 'id');

        $flag = 1;
        if (!$department) {
            $flag = 2;
        }
        //默认筛选：采购入库的单
        $where['pi.billtype'] = array('EQ', 1);
        $purchase_channe = array(0 => '空', 1 => '阿里巴巴', 2 => '淘宝', 3 => '线下');
        $model = new \Think\Model();
        //统计数据量
        /*$subQuery = $this->PurchaseIn->alias('pi')
            ->field("count(*)")
            ->join('__PURCHASE__ pe on pi.id_erp_purchase = pe.id_purchase', 'LEFT')
            ->join('__PURCHASE_PRODUCT__ pp on pp.id_purchase=pi.id_erp_purchase', 'RIGHT')
            ->join('__PRODUCT_SKU__ as ps on ps.id_product_sku = pp.id_product_sku', 'LEFT')
            ->join('__PRODUCT__ as p on p.id_product = pp.id_product', 'LEFT')
            ->group('pi.purchase_no')->where($where)->buildSql();
        $count = $model->table($subQuery . ' pg')->count();*/

        $count =  $this->PurchaseIn->alias('pi')
            ->join('__PURCHASE__ pe on pi.id_erp_purchase = pe.id_purchase','LEFT')
            ->where($where)->group('pi.purchase_no')->count();
        $page = $this->page($count, 20);
        $lists = $this->PurchaseIn->alias('pi')
            ->field('pi.*,pe.inner_purchase_time,ps.sku,p.inner_name,pp.quantity,pp.price as one_price')
            ->join('__PURCHASE__ pe on pi.id_erp_purchase = pe.id_purchase', 'LEFT')
            ->join('__PURCHASE_PRODUCT__ pp on pp.id_purchase=pi.id_erp_purchase', 'RIGHT')
            ->join('__PRODUCT_SKU__ as ps on ps.id_product_sku = pp.id_product_sku', 'LEFT')
            ->join('__PRODUCT__ as p on p.id_product = pp.id_product', 'LEFT')
            ->where($where)->order('id_purchasein DESC')->limit($page->firstRow, $page->listRows)->select();

        foreach ($lists as $k => $v) {
            $all_lists[$v['id_purchasein']]['id_purchasein'] = $v['id_purchasein'];
            $all_lists[$v['id_purchasein']]['purchase_no'] = $v['purchase_no'];
            $all_lists[$v['id_purchasein']]['inner_purchase_no'] = $v['inner_purchase_no'];
            $all_lists[$v['id_purchasein']]['alibaba_no'] = $v['alibaba_no'];
            $all_lists[$v['id_purchasein']]['billdate'] = $v['billdate'];
            $all_lists[$v['id_purchasein']]['inner_purchase_time'] = $v['inner_purchase_time'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['sku'] = $v['sku'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['inner_name'] = $v['inner_name'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['price'] = $v['one_price'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['quantity'] = $v['quantity'];
//            $all_lists[$v['id_purchasein']]['num_amo'] += $v['quantity'];//原来是按照sku采购数量添加
            $all_lists[$v['id_purchasein']]['num_amo'] = $v['total'];//改为入库单对应的采购数量 liuruibin
            $all_lists[$v['id_purchasein']]['price'] = $v['price'];
            $all_lists[$v['id_purchasein']]['price_shipping'] = $v['price_shipping'];
            $all_lists[$v['id_purchasein']]['purchase_channel'] = $v['purchase_channel'];
            $all_lists[$v['id_purchasein']]['id_supplier'] = $v['id_supplier'];
            $all_lists[$v['id_purchasein']]['id_department'] = $v['id_department'];
            $all_lists[$v['id_purchasein']]['id_users'] = $v['id_users'];
            $all_lists[$v['id_purchasein']]['status'] = $v['status'];
            $all_lists[$v['id_purchasein']]['remark'] = $v['remark'];
            $all_lists[$v['id_purchasein']]['user_nicename'] = M('Users')->where(array('id' => $v['id_users']))->getField('user_nicename');
            $all_lists[$v['id_purchasein']]['department_title'] = M('Department')->where(array('id_department' => $v['id_department']))->getField('title');
        }
        $_status = [
            '1' => '<span style="color:blue">未入库</span>',
            '2' => '已入库',
            '3' => '<span style="color:red">部分入库</span>',
            '4' => '已退货'
        ];
        $pur_status = [PurchaseStatus::FINISHCHECK => '已审核', PurchaseStatus::PAYMENT => '已付款', PurchaseStatus::REJECTPAYMENT => '拒绝付款'];
        //查询所有采购部人员
        $shop_users = M()->query("SELECT a.id,a.user_nicename,b.* FROM erp_users AS a LEFT JOIN erp_department_users AS b ON a.id=b.id_users WHERE b.id_department=19");

        $where2['type'] = 1;
        //部门筛选过滤,如不需过滤，直接删掉
        $department_id = isset($_SESSION['department_id']) ? $_SESSION['department_id'] : array(0);
        if (I('get.id_department')) {
            $where2['id_department'] = I('get.id_department');
        } else {
            $where2['id_department'] = array('IN', $department_id);
        }
        //部门筛选
        $depart = M('Department')->where($where2)->cache(true, 3600)->order('sort ASC')->select();
        $this->assign(compact('warehouse', 'supplier', '_status', 'pur_status', 'shop_users', 'depart','purchase_channe'));
        $this->assign('lists',$all_lists);
        $this->assign("Page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 创建退货单详情页
     */
    public function edit()
    {
        if (isset($_GET['id_return']) && $_GET['id_return']) {
            //退货单 编辑通过退货单获取入库单ID
            $id_return = intval($_GET['id_return']);
            $reGoodsInfo = $this->ReturnGoods->where('id_return = ' . $id_return)->find();
            $id_purchasein = $reGoodsInfo['id_purchasein'];
            $id_array = array('id_return' => $id_return);
        } else {
            //创建退货单 直接获取入库单ID
            $id_purchasein = I('get.id/i');
            $id_array = array('id' => $id_purchasein);
        }
        if ($id_purchasein) {
            $pro_table_name = D("Common/Product")->getTableName();
            $pur_or_table_name = $this->PurchaseIn->getTableName();
            $sku_model = D("Common/ProductSku");
            $model = new \Think\Model;

            $purchase = $this->PurchaseIn->where('id_purchasein=' . $id_purchasein)->find();
            $tarray = array();
            $stime = date('Y-m-d 00:00:00', strtotime('-3 day'));
            $etime = date('Y-m-d 00:00:00');
            $tarray[] = array('EGT', $stime);
            $tarray[] = array('LT', $etime);
            $twhere[] = array('created_at' => $tarray);
            if ($purchase['id_purchasein']) {
                $return_time = date('Y-m-d H:i:s');
                $purchase['user_nicename'] = M('Users')->where(array('id' => $purchase['id_users']))->getField('user_nicename');
                $pur_pro_table_name = D("Common/PurchaseInitem")->getTableName();
                $pur_product = $model->table($pur_pro_table_name . ' as pii')
                    ->join($pro_table_name . ' p ON pii.id_product=p.id_product')
                    ->join($pur_or_table_name . ' pi ON pi.id_purchasein = pii.id_purchasein', 'LEFT')
                    ->field('pii.*,p.title,p.thumbs,p.inner_name,received as received_true')->where('pi.id_purchasein=' . $purchase['id_purchasein'])->select();
                foreach ($pur_product as $key => $item) {
                    //获取sku
                    $get_model = $sku_model->find($item['id_product_sku']);
                    $pur_product[$key]['sku'] = $get_model['sku'];
                    //获取sku在途量和库存量、实际可用库存量(库存量-在单量)
                    $get_warehouse_product = D('WarehouseProduct')->where('id_product_sku = ' . $item['id_product_sku'])->find();
                    $pur_product[$key]['reality_quantity'] = $get_warehouse_product['quantity'];
                    $pur_product[$key]['road_num'] = $get_warehouse_product['road_num'];
                    $pur_product[$key]['qty_preout'] = $get_warehouse_product['qty_preout'];
                    $pur_product[$key]['available_quantity'] = $get_warehouse_product['quantity'] - $get_warehouse_product['qty_preout'];

                    //如果是编辑退货单，获取之前填写的信息
                    if (isset($id_return) && $id_return) {
                        $reGoodsItem = D('ReturnGoodsItem')->where('id_return_goods = ' . $id_return . ' and id_product_sku = ' . $item['id_product_sku'])->find();
                        $pur_product[$key]['c_qty'] = $reGoodsItem['c_qty'];

                    }
                }
                //退货编辑，获取退货类型
                if ($reGoodsInfo) {
                    $purchase['received_true'] = $reGoodsInfo['return_type'];
                }
            }
            $return_type = array('1' => "<span style='color:red'>库存退货</span>", '2' => "<span style='color:blue'>在途退货</span>");
            $supplier_name = M('Supplier')->field('title,supplier_url')->where(array('id_supplier' => $purchase['id_supplier']))->find();
            $this->assign('supplier_name', $supplier_name);
            $this->assign('return_time', $return_time);
            $this->assign('product', $pur_product);
            $this->assign('data', $purchase);
            $this->assign('reGoodsInfo', $reGoodsInfo);
            $this->assign('return_type', $return_type);
            $this->assign('id_array', $id_array);
            $data = SearchData::search();
            $this->assign('search', $data);
            $this->display();
        } else {
            $this->error("入库单ID不能为空");
        }
    }

    /**
     * 创建退货详情页 -- 异步获取已经申请退货的SKU的退货数量   liuruibin   20171116
     */
    public function get_c_qty()
    {
        //传入一个入库单ID
        $id_purchasein = I('get.id/i');
        //传入一个类型(库存退货/在途退货)
        $return_type = I('get.type/i');
        $where['rg.return_type'] = array('EQ', $return_type);
        $where['rg.warehouse_status'] = array('NEQ', 2);
        $where['rg.purchase_status'] = array('IN', array(1, 2));
        $where['rg.id_purchasein'] = array('EQ', $id_purchasein);
        $result = $this->ReturnGoods->alias('rg')
            ->field('SUM(rgi.c_qty) as c_qty_sum,ps.sku')
            ->join('__RETURN_GOODS_ITEM__ rgi on rg.id_return = rgi.id_return_goods', 'RIGHT')
            ->join('__PRODUCT_SKU__ ps on rgi.id_product_sku = ps.id_product_sku')
            ->where($where)
            ->group('rgi.id_product_sku')
            ->select();
        echo json_encode($result);
    }

    /**
     * 退货管理
     * 提交-创建退货单    liuruibin  20171102
     */
    public function save_edit()
    {
        if ($_POST['id_purchasein']) {
            //退货单更改时 获取退货单ID
            $get_id_return = isset($_POST['id_return']) ? $_POST['id_return'] : '';
            $id_purchasein = I('post.id_purchasein/d');
            $pro_table_name = D("Common/Product")->getTableName();
            $pur_or_table_name = $this->PurchaseIn->getTableName();
            $pur_ini_table_name = $this->PurchaseInitem->getTableName();
            $model = new \Think\Model;
            //查询入库详情单的信息
            $purchaseInfo = $model->table($pur_or_table_name . ' pi')
                ->field('pi.* , pii.id_purchaseinitem, pii.id_product_sku as sku,pii.option_value,pii.id_product,pii.price as pii_price,pii.quantity,pii.received_true')
                ->join($pur_ini_table_name . ' as pii on pi.id_purchasein = pii.id_purchasein', 'LEFT')
                ->where('pii.id_purchasein=' . $id_purchasein)
                ->find();
            $add_data['id_purchasein'] = I('post.id_purchasein');
            $add_data['id_warehouse'] = I('post.id_warehouse');
            $add_data['id_department'] = I('post.id_department');
            $add_data['id_users'] = $_SESSION['ADMIN_ID'];
            $add_data['id_supplier'] = I('post.id_supplier');
            $add_data['purchase_no'] = I('post.purchase_no');
            $add_data['inner_purchase_no'] = I('post.inner_purchase_no');
            $add_data['alibaba_no'] = I('post.alibaba_no');
            $add_data['id_purchase'] = I('post.id_erp_purchase');
            $add_data['total_qty'] = (int)I('post.return_num');//退货数量
            $add_data['total_price'] = (float)I('post.return_price');//退货总价
            $add_data['return_type'] = intval(I('post.return_type'));//退货类型
            $add_data['return_time'] = I('post.return_time');//退货时间
            $add_data['receive_person'] = I('post.addressee');//收件人
            $add_data['phone'] = I('post.tel');//收件人电话
            $add_data['address'] = I('post.address');//收件人地址
            $add_data['reason'] = I('post.return_reson');//退货原因
            $add_data['remark_purchase'] = I('post.remark');//采购退货备注
            $attr_name = I('post.attr_name');//属性名
            $get_qty_num = I('post.get_qty');//采购数量
            $attr_price = I('post.set_price');  //每个sku价格
            $received_true = I('post.received_true');  //入库数量
            $price_true = I('post.price_true');  //退货实际金额
            $total_price = I('post.total_price');  //总价格
            $total_qty = 0;
            $set_qty = array_filter($_POST['set_qty']);
            $add_data['updated_at'] = date('Y-m-d H:i:s');
            $return_type_arr = array_keys(ReturnGoodsModel::$return_type);
            if (!in_array($add_data['return_type'] , $return_type_arr) ) {
                $this->error("退货类型不能为空");exit;
            }
            if ($get_id_return) {
                $returns_info = $model->table('__RETURN_GOODS__')->where('id_return = ' . $get_id_return)->find();
                //如果采购状态为“已通过[2]”，仓库状态为“已退货[2]”的，直接更新采购的状态为“采购确认[4]”,并更新实际退货金额
                if ($returns_info['warehouse_status'] == 2 && $returns_info['purchase_status'] == 2) {
                    $update['purchase_status'] = 4;//采购状态为“确认状态”
                    $update['price_true'] = $price_true;//实际退货金额
                    $result = $model->table('__RETURN_GOODS__')->where('id_return = ' . $get_id_return)->save($update);
                    if ($result) {
                        $this->success("退货单确认完成", U('Purchase/Returns/confirm_return'));
                        exit;
                    }
                }
                //编辑退货单 保存更新退货订单信息 状态更改为“未审核”
                if ($returns_info['purchase_status'] != 2) {
                    $add_data['purchase_status'] = 1;
                }
                $id_return_goods = $model->table('__RETURN_GOODS__')->where('id_return = ' . $get_id_return)->save($add_data);
            } else {
                //新建退货单 添加到退货表
                $add_data['created_at'] = date('Y-m-d H:i:s');
                $id_return_goods = $model->table('__RETURN_GOODS__')->add($add_data);
            }

            if ($id_return_goods && $set_qty) {
                $total_received = 0;
                foreach ($set_qty as $pro_id => $item) {
                    $get_qty = $item;
                    if ($get_qty && count($get_qty)) {
                        foreach ($get_qty as $key => $qty) {
                            $sku_ids = $key; //SKU id
                            $get_attr_name = $attr_name[$pro_id][$key]; //属性名称
                            $get_received_true = intval($received_true[$pro_id][$key]); //入库数量
                            $get_qty_num_v = intval($get_qty_num[$pro_id][$key]);//采购数量
                            $get_c_qty = $qty;//采购退货数量
                            $get_price = (float)$attr_price[$pro_id][$key]; //价格
                            if ($get_c_qty != 0) {//退货数量为0的SKU不录入
                                $array_data = array(
                                    'id_product' => $pro_id,
                                    'id_product_sku' => $sku_ids,
                                    'option_value' => $get_attr_name,
                                    'quantity' => $get_qty_num_v,
                                    'price' => $get_price,
                                    'c_qty' => $get_c_qty,
                                    'received_true' => $get_received_true,
                                    'remark' => I('post.remark')
                                );
                                if ($get_id_return) {
                                    //编辑退货单 保存更新到退货明细表
                                    $where = array('id_return_goods' => $get_id_return, 'id_product_sku' => $sku_ids);
                                    $array_data['id_return_goods'] = $get_id_return;
                                    $model->table('__RETURN_GOODS_ITEM__')->where($where)->save($array_data);
                                    add_system_record(sp_get_current_admin_id(), 1, 3, '更新退货单成功');
                                } else {
                                    //新增退货单 添加到退货明细表
                                    $array_data['id_return_goods'] = $id_return_goods;
                                    $model->table('__RETURN_GOODS_ITEM__')->add($array_data);
                                    add_system_record(sp_get_current_admin_id(), 1, 3, '创建退货单成功');
                                }
                            }
                        }
                    }
                }
            }
            $this->success("退货单保存成功", U('Purchase/Returns/return_list'));
        } else {
            add_system_record(sp_get_current_admin_id(), 1, 3, '退货单保存失败');
            $this->error("保存失败,采购明细单ID不能为空");
        }

    }

    /**
     * 导出 - 创建退货单列表     liuruibin 20171103
     */
    public function export_index()
    {
        vendor("PHPExcel.PHPExcel");
        vendor("PHPExcel.PHPExcel.IOFactory");
        vendor("PHPExcel.PHPExcel.Writer.CSV");
        $excel = new \PHPExcel();
        $idx = 2;
        $column = array(
            '采购单号', '内部采购单号', '采购渠道订单号', '内部采购时间', 'SKU', '产品内部名', '采购单价', '采购金额', '采购数量',
            '采购总数量', '采购总金额', '采购运费', '采购渠道', '供应商', '部门', '采购员', '入库状态', '备注'
        );
        $j = 65;
        foreach ($column as $col) {
            $excel->getActiveSheet()->setCellValue(chr($j) . '1', $col);
            ++$j;
        }

        $supplier = M('Supplier')->getField('id_supplier,title');
        $_status = [
            '1' => '未入库',
            '2' => '已入库',
            '3' => '部分入库'
        ];
        $_GET['start_time'] = $this->time_start;
        $_GET['end_time'] = $this->time_end;
        //部门-筛选
        if (isset($_GET['depart_id']) && $_GET['depart_id']) {
            $where['pi.id_department'] = array('EQ', $_GET['depart_id']);
        }
        //仓库-筛选
        if (isset($_GET['ware_id']) && $_GET['ware_id']) {
            $where['pi.id_warehouse'] = array('EQ', $_GET['ware_id']);
        }
        //入库状态-筛选
        if (isset($_GET['status']) && $_GET['status']) {
            $where['pi.status'] = array('EQ', $_GET['status']);
        }
        //采购时间-筛选
        $createAtArray = array();
        if (isset($_GET['start_time']) && $_GET['start_time']) {
            $createAtArray[] = array('EGT', $_GET['start_time']);
            if ($_GET['end_time']) {
                $createAtArray[] = array('LT', $_GET['end_time']);
            }
        } else {
            $createAtArray[] = array('EGT', date('Y-m-d', strtotime('-7 days')));
            $createAtArray[] = array('LT', date('Y-m-d', strtotime('+1 day')));
        }
        if (!empty($createAtArray))
            $where['pe.inner_purchase_time'] = $createAtArray;
        //采购单号-查询
        if (isset($_GET['purchase_no']) && $_GET['purchase_no']) {
            $pur_num = trim($_GET['purchase_no']);
            $where['pi.purchase_no'] = array('like', "%{$pur_num}%");
        }
        //内部采购单号-查询
        if (isset($_GET['inner_purchase_no']) && $_GET['inner_purchase_no']) {
            $inner_purchase_no = trim($_GET['inner_purchase_no']);
            $where['pi.inner_purchase_no'] = array('like', "%{$inner_purchase_no}%");
        }
        //采购渠道订单号-查询[阿里巴巴渠道]
        if (isset($_GET['alibaba_no']) && $_GET['alibaba_no']) {
            $alibaba_no = trim($_GET['alibaba_no']);
            $where['pi.alibaba_no'] = array('like', "%{$alibaba_no}%");
        }
        //sku-查询
        if (isset($_GET['sku']) && $_GET['sku']) {
            $id_purchase = M('PurchaseProduct')->alias('pp')
                ->field('id_purchase')
                ->join('__PRODUCT_SKU__ ps on ps.id_product_sku = pp.id_product_sku')
                ->where(array('sku' => $_GET['sku']))
                ->getField('id_purchase', true);
            $new = '';
            foreach ($id_purchase as $k => $v) {
                $new .= 'pi.id_erp_purchase = ' . $v . ' OR ';
            }
            if (!empty($id_purchase)) {
                $where[] = substr($new, 0, -3);
            } else {
                //为空就找不到
                $where['pi.id_erp_purchase'] = -1;
            }
        }
        //采购员-筛选
        if (isset($_GET['shop_id']) && $_GET['shop_id']) {
            $where['pi.id_users'] = array('EQ', $_GET['shop_id']);
        }
        //产品内部名
        if (isset($_GET['inner_name']) && $_GET['inner_name']) {
            $inner_name = $_GET['inner_name'];
            $where['p.inner_name'] = array('like', "%{$inner_name}%");
        }
        $depart_id = session('department_id');
        $department = D('ReturnGoods')->getAllDepartment($depart_id);
        $users = D('ReturnGoods')->getAllUsers();
        $purchase_channe = array(0 => '空', 1 => '阿里巴巴', 2 => '淘宝', 3 => '线下');
        //默认筛选：采购入库的单
        $where['pi.billtype'] = array('EQ', 1);
        /*$lists = $this->PurchaseIn->alias('pi')->where($where)->order('id_purchasein DESC')->select();*/
        //修改导出查询方式，改为连表查询，liuruibin 20171115
        $lists = $this->PurchaseIn->alias('pi')
            ->field('pi.*,pe.inner_purchase_time,ps.sku,p.inner_name,pp.quantity,pp.price as one_price')
            ->join('__PURCHASE__ pe on pi.id_erp_purchase = pe.id_purchase', 'LEFT')
            ->join('__PURCHASE_PRODUCT__ pp on pp.id_purchase=pi.id_erp_purchase', 'RIGHT')
            ->join('__PRODUCT_SKU__ as ps on ps.id_product_sku = pp.id_product_sku', 'LEFT')
            ->join('__PRODUCT__ as p on p.id_product = pp.id_product', 'LEFT')
            ->where($where)->order('id_purchasein DESC')->group('pi.purchase_no')->select();
        foreach ($lists as $k => $v) {
            $all_lists[$v['id_purchasein']]['id_purchasein'] = $v['id_purchasein'];
            $all_lists[$v['id_purchasein']]['purchase_no'] = $v['purchase_no'];
            $all_lists[$v['id_purchasein']]['inner_purchase_no'] = $v['inner_purchase_no'];
            $all_lists[$v['id_purchasein']]['alibaba_no'] = $v['alibaba_no'];
            $all_lists[$v['id_purchasein']]['billdate'] = $v['billdate'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['sku'] = $v['sku'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['inner_name'] = $v['inner_name'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['price'] = $v['one_price'];
            $all_lists[$v['id_purchasein']]['purchase_product'][$k]['quantity'] = $v['quantity'];
//            $all_lists[$v['id_purchasein']]['num_amo'] += $v['quantity'];//原来是按照sku采购数量添加
            $all_lists[$v['id_purchasein']]['num_amo'] = $v['total'];//改为入库单对应的采购数量 liuruibin
            $all_lists[$v['id_purchasein']]['price'] = $v['price'];
            $all_lists[$v['id_purchasein']]['price_shipping'] = $v['price_shipping'];
            $all_lists[$v['id_purchasein']]['purchase_channel'] = $v['purchase_channel'];
            $all_lists[$v['id_purchasein']]['id_supplier'] = $v['id_supplier'];
            $all_lists[$v['id_purchasein']]['id_department'] = $v['id_department'];
            $all_lists[$v['id_purchasein']]['id_users'] = $v['id_users'];
            $all_lists[$v['id_purchasein']]['status'] = $v['status'];
            $all_lists[$v['id_purchasein']]['remark'] = $v['remark'];
        }
        foreach ($all_lists as $p) {
            $data[] = array(
                $p['purchase_no'], $p['inner_purchase_no'], $p['alibaba_no'], $p['billdate'], $p['purchase_product'], '', '', '', '',
                $p['num_amo'], $p['price'], $p['price_shipping'], $purchase_channe[$p['purchase_channel']], $supplier[$p['id_supplier']], $department[$p['id_department']], $users[$p['id_users']], $_status[$p['status']], $p['remark']
            );
        }


//        dump($this->PurchaseIn->_sql());exit;

        /*foreach ($lists as $key => $list) {
            $purchase_channel = '';
            switch ($list['purchase_channel']) {
                case 1: $purchase_channel = '阿里巴巴 ';
                    break;
                case 2: $purchase_channel = '淘宝 ';
                    break;
                case 3: $purchase_channel = '线下 ';
                    break;
                default:$purchase_channel = '空 ';
            }
            $lists[$key]['purchase_channel'] = $purchase_channel;
            $where_pro['pp.id_purchase'] = $list['id_erp_purchase'];
            $lists[$key]['purchase_product'] = $this->PurchaseProduct->alias('pp')
                ->field('pp.*,ps.*,p.thumbs,p.inner_name,pp.quantity*pp.price as totalitem')
                ->join('__PRODUCT_SKU__ as ps on ps.id_product_sku = pp.id_product_sku', 'LEFT')
                ->join('__PRODUCT__ as p on p.id_product = pp.id_product', 'LEFT')
                ->where($where_pro)->select();

            $lists[$key]['num_amo']=0;
            foreach($lists[$key]['purchase_product'] as $k=>$v){
                $lists[$key]['num_amo'] += $v['quantity'];
            }
            $lists[$key]['totalprice']=  array_sum(array_column($lists[$key]['purchase_product'],'totalitem'))+$list['price_shipping'];
            $lists[$key]['user_nicename'] = M('Users')->where(array('id' => $list['id_users']))->getField('user_nicename');
            $lists[$key]['department_title'] = M('Department')->where(array('id_department' => $list['id_department']))->getField('title');
        }*/
        if ($data) {
            $k = 2;
            $num = 2;
            $sum = 2;
            foreach ($data as $kk => $items) {
                $j = 65;
                $count = count($items[4]);
                if ($count > 1) {
                    $excel->getActiveSheet()->mergeCells("A" . ($num ? $num : $idx) . ":" . "A" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("B" . ($num ? $num : $idx) . ":" . "B" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("C" . ($num ? $num : $idx) . ":" . "C" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("D" . ($num ? $num : $idx) . ":" . "D" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("J" . ($num ? $num : $idx) . ":" . "J" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("K" . ($num ? $num : $idx) . ":" . "K" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("L" . ($num ? $num : $idx) . ":" . "L" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("M" . ($num ? $num : $idx) . ":" . "M" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("N" . ($num ? $num : $idx) . ":" . "N" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("O" . ($num ? $num : $idx) . ":" . "O" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("P" . ($num ? $num : $idx) . ":" . "P" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("Q" . ($num ? $num : $idx) . ":" . "Q" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("R" . ($num ? $num : $idx) . ":" . "R" . (($num ? $num : $idx) + $count - 1));
                    $num = (($num ? $num : $idx) + $count);
                } else {
                    $num += 1;
                }
                foreach ($items as $key => $col) {

                    if (is_array($col)) {

                        $a = 0;
                        foreach ($col as $c) {
                            $excel->getActiveSheet()->setCellValue("E" . $sum, $c['sku']);
                            $excel->getActiveSheet()->setCellValue("F" . $sum, $c['inner_name']);
                            $excel->getActiveSheet()->setCellValue("G" . $sum, $c['price']);
                            $excel->getActiveSheet()->setCellValueExplicit("H" . $sum, $c['price'] * $c['quantity']);
                            $excel->getActiveSheet()->setCellValueExplicit("I" . $sum, $c['quantity']);
                            $a++;
                            $sum = $sum + 1;
                        }
                    } else {
                        $bb = $sum;
                        if ($key > 8) {
                            $bb = $sum - $count;
                        }
                        if (!in_array($key, [4, 5, 6, 7, 8])) {
                            if (in_array($key, array(0, 2))) {
                                $excel->getActiveSheet()->setCellValueExplicit(chr($j) . $bb, $col);
                            } else {
                                $excel->getActiveSheet()->setCellValue(chr($j) . $bb, $col);
                            }
                        }
                    }
                    ++$j;//横
                }
                ++$idx;//列
                ++$k;
            }
        }
        add_system_record(sp_get_current_admin_id(), 7, 4, '导出创建退货单列表');
        $excel->getActiveSheet()->setTitle(date('Y-m-d') . '创建退货单列表信息.xlsx');
        $excel->setActiveSheetIndex(0);
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . date('Y-m-d') . '创建退货单列表信息.xlsx"');
        header('Cache-Control: max-age=0');
        $writer = \PHPExcel_IOFactory::createWriter($excel, 'Excel2007');
        $writer->save('php://output');
        exit();
    }

    /**
     * 退货待审核列表      liuruibin 20171106
     */
    public function pending_list()
    {
        $_GET['start_time'] = $this->time_start;
        $_GET['end_time'] = $this->time_end;
        if (isset($_GET['depart_id']) && $_GET['depart_id']) {
            $where['rg.id_department'] = array('EQ', $_GET['depart_id']);
        };
        if (isset($_GET['id_return']) && $_GET['id_return']) {
            $where['rg.id_return'] = array('EQ', $_GET['id_return']);
        }
        if (isset($_GET['alibaba_no']) && $_GET['alibaba_no']) {
            $alibaba_no = trim($_GET['alibaba_no']);
            $where['rg.alibaba_no'] = array('LIKE', "%{$alibaba_no}%");
        }
        if (isset($_GET['inner_purchase_no']) && $_GET['inner_purchase_no']) {
            $inner_purchase_no = trim($_GET['inner_purchase_no']);
            $where['rg.inner_purchase_no'] = array('LIKE', "%{$inner_purchase_no}%");
        }
        if (isset($_GET['sku']) && $_GET['sku']) {
            $id_phurchase = M('PurchaseProduct')->alias('pp')
                ->field('id_purchase')
                ->join('__PRODUCT_SKU__ ps on ps.id_product_sku = pp.id_product_sku')
                ->where(array('sku' => $_GET['sku']))
                ->getField('id_purchase', true);
            $new = '';
            foreach ($id_phurchase as $key => $v) {
                $new .= 'rg.id_purchase = ' . $v . ' OR ';
            }
            if (!empty($id_phurchase)) {
                $where[] = substr($new, 0, -3);
            } else {
                //找不到
                $where['rg.id_purchase'] = -1;
            }
        }
        if (isset($_GET['purchase_no']) && $_GET['purchase_no']) {
            $purchase_no = trim($_GET['purchase_no']);
            $where['rg.purchase_no'] = array('LIKE', "%{$purchase_no}%");
        }
        if (isset($_GET['receive_person']) && $_GET['receive_person']) {
            $receive_person = trim($_GET['receive_person']);
            $where['rg.receive_person'] = array('LIKE', "%{$receive_person}%");
        }
        if (isset($_GET['phone']) && $_GET['phone']) {
            $where['rg.phone'] = array('EQ', $_GET['phone']);
        }
        if (isset($_GET['address']) && $_GET['address']) {
            $address = trim($_GET['address']);
            $where['rg.address'] = array('LIKE', "%{$address}%");
        }
        if (isset($_GET['purchase_status']) && $_GET['purchase_status']) {
            $where['purchase_status'] = array('EQ', $_GET['purchase_status']);
        } else {
            if ($_GET['purchase_status']) {
                $where['purchase_status'] = array('EQ', 1);
            }
        }
        $createAtArray = array();
        if (isset($_GET['start_time']) && $_GET['start_time']) {
            $createAtArray[] = array('EGT', $_GET['start_time']);
            if ($_GET['end_time']) {
                $createAtArray[] = array('LT', $_GET['end_time']);
            }
        } else {
            $createAtArray[] = array('EGT', date('Y-m-d', strtotime('-7 days')));
            $createAtArray[] = array('LT', date('Y-m-d', strtotime('+1 day')));
        }
        if (!empty($createAtArray)) {
            $where['rg.return_time'] = $createAtArray;
        }

        $count = $this->ReturnGoods->alias('rg')
            ->field('rg.*,pi.price_shipping as pur_price_shipping,pi.price as pur_price')
            ->join('__PURCHASE_IN__ pi on pi.id_purchasein = rg.id_purchasein', 'LEFT')
            ->where($where)->count();
        $page = $this->page($count, 20);
        $lists = $this->ReturnGoods->alias('rg')
            ->field('rg.*,pi.price_shipping as pur_price_shipping,pi.price as pur_price')
            ->join('__PURCHASE_IN__ pi on pi.id_purchasein = rg.id_purchasein', 'LEFT')
            ->where($where)->order('id_return DESC')->limit($page->firstRow, $page->listRows)->select();
        //采购渠道 sku信息      liuruibin 20171106
        foreach ($lists as $key => $list) {
            $wherePro['rgi.id_return_goods'] = $list['id_return'];
            $lists[$key]['return_product'] = M('ReturnGoodsItem')->alias('rgi')
                ->field('rgi.*,ps.sku')
                ->join('__PRODUCT_SKU__ as ps on ps.id_product_sku = rgi.id_product_sku', 'LEFT')
                ->where($wherePro)->select();
            $lists[$key]['user_nicename'] = M('Users')->where(array('id' => $list['id_users']))->getField('user_nicename');
            $lists[$key]['department_title'] = M('Department')->where(array('id_department' => $list['id_department']))->getField('title');

        }

        $_status = ReturnGoodsModel::$purchase_status;
        //审核状态      liuruibin 20171106
        $purchase_status = ReturnGoodsModel::$purchase_status;

        $where2['type'] = 1;
        //部门筛选过滤,如不需过滤，直接删掉      liuruibin 20171106
        $department_id = isset($_SESSION['department_id']) ? $_SESSION['department_id'] : array(0);
        if (I('get.id_department')) {
            $where2['id_department'] = I('get.id_department');
        } else {
            $where2['id_department'] = array('IN', $department_id);
        }
        //部门筛选      liuruibin 20171106
        $depart = M('Department')->where($where2)->cache(true, 3600)->order('sort ASC')->select();

        $this->assign('depart', $depart);
        $this->assign('lists', $lists);
        $this->assign('_status', $_status);
        $this->assign('purchase_status', $purchase_status);
        $this->assign("Page", $page->show('Admin'));
        $this->display();
    }

    /*
     * 退货订单列表       liuruibin   20171106
     * */
    public function return_list()
    {
        $_GET['start_time'] = $this->time_start;
        $_GET['end_time'] = $this->time_end;
        if (isset($_GET['depart_id']) && $_GET['depart_id']) {
            $where['rg.id_department'] = array('EQ', $_GET['depart_id']);
        }
        if (isset($_GET['id_return']) && $_GET['id_return']) {
            $where['rg.id_return'] = array('EQ', $_GET['id_return']);
        }
        if (isset($_GET['alibaba_no']) && $_GET['alibaba_no']) {
            $alibaba_no = trim($_GET['alibaba_no']);
            $where['rg.alibaba_no'] = array('LIKE', "%{$alibaba_no}%");
        }
        if (isset($_GET['inner_purchase_no']) && $_GET['inner_purchase_no']) {
            $inner_purchase_no = trim($_GET['inner_purchase_no']);
            $where['rg.inner_purchase_no'] = array('LIKE', "%{$inner_purchase_no}%");
        }
        if (isset($_GET['sku']) && $_GET['sku']) {
            $id_phurchase = M('PurchaseProduct')->alias('pp')
                ->field('id_purchase')
                ->join('__PRODUCT_SKU__ ps on ps.id_product_sku = pp.id_product_sku')
                ->where(array('sku' => $_GET['sku']))
                ->getField('id_purchase', true);
            $new = '';
            foreach ($id_phurchase as $key => $v) {
                $new .= 'rg.id_purchase = ' . $v . ' OR ';
            }
            if (!empty($id_phurchase)) {
                $where[] = substr($new, 0, -3);
            } else {
                //找不到
                $where['rg.id_purchase'] = -1;
            }
        }
        if (isset($_GET['purchase_no']) && $_GET['purchase_no']) {
            $purchase_no = trim($_GET['purchase_no']);
            $where['rg.purchase_no'] = array('LIKE', "%{$purchase_no}%");
        }
        if (isset($_GET['receive_person']) && $_GET['receive_person']) {
            $receive_person = trim($_GET['receive_person']);
            $where['rg.receive_person'] = array('LIKE', "%{$receive_person}%");
        }
        if (isset($_GET['phone']) && $_GET['phone']) {
            $where['rg.phone'] = array('EQ', $_GET['phone']);
        }
        if (isset($_GET['address']) && $_GET['address']) {
            $address = trim($_GET['address']);
            $where['rg.address'] = array('LIKE', "%{$address}%");
        }
        if (isset($_GET['collection_status']) && $_GET['collection_status'] != 0) {
            $where['rg.collection_status'] = array('EQ', $_GET['collection_status']);
        }
        if (isset($_GET['express_id']) && $_GET['express_id'] != 0) {
            $where['rg.express_id'] = array('EQ', $_GET['express_id']);
        }
        if (isset($_GET['track_number']) && $_GET['track_number']) {
            $where['rg.track_number'] = array('EQ', $_GET['track_number']);
        }
        if (isset($_GET['warehouse_status']) && $_GET['warehouse_status'] != 0) {
            $where['rg.warehouse_status'] = array('EQ', $_GET['warehouse_status']);
        }
        $createAtArray = array();
        if (isset($_GET['start_time']) && $_GET['start_time']) {
            $createAtArray[] = array('EGT', $_GET['start_time']);
            if ($_GET['end_time']) {
                $createAtArray[] = array('LT', $_GET['end_time']);
            }
        } else {
            $createAtArray[] = array('EGT', date('Y-m-d', strtotime('-7 days')));
            $createAtArray[] = array('LT', date('Y-m-d', strtotime('+1 day')));
        }
        if (!empty($createAtArray)) {
            $where['rg.return_time'] = $createAtArray;
        }

        $count = $this->ReturnGoods->alias('rg')
            ->field('rg.*,pi.price_shipping as pur_price_shipping,pi.price as pur_price')
            ->join('__PURCHASE_IN__ pi on pi.id_purchasein = rg.id_purchasein', 'LEFT')
            ->where($where)->count();
        $page = $this->page($count, 20);
        $lists = $this->ReturnGoods->alias('rg')
            ->field('rg.*,rg.remark as wh_remark,pi.price_shipping as pur_price_shipping,pi.price as pur_price')
            ->join('__PURCHASE_IN__ pi on pi.id_purchasein = rg.id_purchasein', 'LEFT')
            ->where($where)->order('id_return DESC')->limit($page->firstRow, $page->listRows)->select();
        //产品SKU信息、采购员、部门名称
        foreach ($lists as $key => $list) {
            $wherePro['rgi.id_return_goods'] = $list['id_return'];
            $lists[$key]['return_product'] = M('ReturnGoodsItem')->alias('rgi')
                ->field('rgi.*,ps.sku')
                ->join('__PRODUCT_SKU__ as ps on ps.id_product_sku = rgi.id_product_sku', 'LEFT')
                ->where($wherePro)->select();
            $lists[$key]['user_nicename'] = M('Users')->where(array('id' => $list['id_users']))->getField('user_nicename');
            $lists[$key]['department_title'] = M('Department')->where(array('id_department' => $list['id_department']))->getField('title');

        }
        $_status = ReturnGoodsModel::$purchase_status;
        //收款状态  liuruibin 20171106
        $cot_status = ReturnGoodsModel::$collection_status;
        //物流信息  liuruibin 20171106
        $express_info = ReturnGoodsModel::$express_info;
        //仓库审核状态  liuruibin 20171106
        $warehouse_status = ReturnGoodsModel::$warehouse_status;


        $where2['type'] = 1;
        //部门筛选过滤,如不需过滤，直接删掉  liuruibin 20171106
        $department_id = isset($_SESSION['department_id']) ? $_SESSION['department_id'] : array(0);
        if (I('get.id_department')) {
            $where2['id_department'] = I('get.id_department');
        } else {
            $where2['id_department'] = array('IN', $department_id);
        }
        //部门筛选  liuruibin 20171106
        $depart = M('Department')->where($where2)->cache(true, 3600)->order('sort ASC')->select();

        $this->assign(compact('depart', 'lists', '_status', 'cot_status', 'express_info', 'warehouse_status'));
        $this->assign("Page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 采购退货审核--采购主管审核  liuruibin 20171107
     */
    public function return_approval()
    {
        $id_return = $_REQUEST['id_return'];
        $check = $_REQUEST['check'];
        if ($check == 'pass') {
            $data['updated_at'] = date('Y-m-d H:i:s');
            $id_return = explode(',', $id_return);
            foreach ($id_return as $v) {
                $data['purchase_status'] = 2;
                $goods_purchase = $this->ReturnGoods->where(array('id_return' => $v))
                    ->field('id_purchase,return_type,id_warehouse,purchase_no,total_price')
                    ->find();
                if ($goods_purchase['return_type'] == 2) { //在途退货，直接到采购单确认列表 zhujie 20171121
                    $data['warehouse_status'] = 2;//仓库状态 已退货
                    $data['price_true'] = $goods_purchase['total_price'];
                    $data['qty_true'] = $goods_purchase['total_qty'];
                    //减在途
                    $returnGoodsItemArr = $this->return_goods_item->where(['id_return_goods' => $v])
                        ->field('id_product_sku,c_qty,id_product,id_return_goods_item')
                        ->select();

                    M()->startTrans();
                    foreach ($returnGoodsItemArr as $item) {
                        //先查询 在途量

                        $WarehouseProduct_arr = M("WarehouseProduct")->where([
                            'id_warehouse' => $goods_purchase['id_warehouse'],
                            'id_product' => $item['id_product'],
                            'id_product_sku' => $item['id_product_sku']])->find();
                        if ($WarehouseProduct_arr['road_num'] - abs($item['c_qty']) < 0) {
                            $this->ajaxReturn(['flag' => 0, 'msg' => '在途量不够，无法退在途量']);exit;
                        }

                        $update_WarehouseProduct = [
                            'road_num' => ['exp', 'road_num+' . $item['c_qty']],
                        ];
                        $update_WarehouseProduct_res = M("WarehouseProduct")->where([
                            'id_warehouse' => $goods_purchase['id_warehouse'],
                            'id_product' => $item['id_product'],
                            'id_product_sku' => $item['id_product_sku'],
                        ])->setField($update_WarehouseProduct);
                        //更新到退货详细SKU的实际退货数量     liuruibin   20171206
                        $rgi_data['c_qty_true'] = $item['c_qty'];
                        $update_ReturnGoodsItem = $this->return_goods_item->where('id_return_goods_item = '.$item['id_return_goods_item'])->save($rgi_data);
                        if ($update_WarehouseProduct_res === false || $update_ReturnGoodsItem  === false) {
                            M()->rollback();
                            $this->ajaxReturn(['flag' => 0, 'msg' => '在途量更新失败']);
                        }
                    }
                    //改变原采购入库单状态 为已退货
                    $PurchaseIn_update = $this->PurchaseIn->where(['purchase_no' => $goods_purchase['purchase_no']])
                        ->save(['status' => 4]);
                    $result = $this->ReturnGoods->where(array('id_return' => $v))->save($data);
                    if ($PurchaseIn_update === false || $result === false) {
                        M()->rollback();
                        $this->ajaxReturn(['flag' => 0, 'msg' => '在途量更新失败']);
                    }
                    M()->commit();
                } else {
                    //库存退货改变 采购状态 2
                    $result = $this->ReturnGoods->where(array('id_return' => $v))->save($data);
                }
                if ($goods_purchase)
                    $res = D("Purchase/PurchaseStatus")->add_pur_history($goods_purchase['id_purchase'], 2, '采购退货-已通过审核');

            }
        } elseif ($check == 'refuse') {
            $data['purchase_status'] = 3;
            $data['updated_at'] = date('Y-m-d H:i:s');
            $data['remark_purchase'] = $_REQUEST['reason'];
            $id_return = explode(',', $id_return);
            foreach ($id_return as $v) {
                $id_purchase = $this->ReturnGoods->where(array('id_return' => $v))->getField('id_purchase');
                if ($id_purchase)
                    $res = D("Purchase/PurchaseStatus")->add_pur_history($id_purchase, 3, '采购退货-已驳回审核，原因是' . $data['remark']);

            }

            $result = $this->ReturnGoods->where(array('id_return' => array('IN', $id_return)))->save($data);
        }

        if ($result) {
            $flag = 0;
            $msg = '审核完成';
        } else {
            $flag = 1;
            $msg = '审核失败';
        }
        echo json_encode(array('flag' => $flag, 'msg' => $msg));
        exit;

    }

    /**
     * 导出退货订单列表     liuruibin   20171108
     */
    public function export_return_list()
    {
        $export_type = $_GET['export_type'];
        vendor("PHPExcel.PHPExcel");
        vendor("PHPExcel.PHPExcel.IOFactory");
        vendor("PHPExcel.PHPExcel.Writer.CSV");
        $excel = new \PHPExcel();
        $idx = 2;
        if ($export_type == 'return_list') {
            $column = array(
                '退货单号','采购单号', '内部采购单号', '采购渠道订单号', '退货日期', '部门', '采购员', 'SKU', '采购数量', '采购单价', '采购运费', '采购金额', '采购退货数量',
                '退货单价金额', '采购退货总数量', '退货总金额', '实际退货数量', '采购审核状态', '仓库审核状态', '退货运费', '物流	', '运单号', '收件人', '电话', '收件地址', '采购审核备注'
            );
        }
        if ($export_type == 'pending_list') {
            $column = array(
                '退货单号','采购单号', '内部采购单号', '采购渠道订单号', '退货日期', '部门', '采购员', 'SKU', '采购数量', '采购单价', '采购运费', '采购金额', '采购退货数量',
                '退货单价金额', '采购退货总数量', '退货总金额', '收件人', '电话', '收件地址', '采购审核备注'
            );
        }
        $j = 65;
        foreach ($column as $col) {
            $excel->getActiveSheet()->setCellValue(chr($j) . '1', $col);
            ++$j;
        }

        if (isset($_GET['depart_id']) && $_GET['depart_id']) {
            $where['rg.id_department'] = array('EQ', $_GET['depart_id']);
        }
        if (isset($_GET['id_return']) && $_GET['id_return']) {
            $where['rg.id_return'] = array('EQ', $_GET['id_return']);
        }
        if (isset($_GET['alibaba_no']) && $_GET['alibaba_no']) {
            $alibaba_no = trim($_GET['alibaba_no']);
            $where['rg.alibaba_no'] = array('LIKE', "%{$alibaba_no}%");
        }
        if (isset($_GET['inner_purchase_no']) && $_GET['inner_purchase_no']) {
            $inner_purchase_no = trim($_GET['inner_purchase_no']);
            $where['rg.inner_purchase_no'] = array('LIKE', "%{$inner_purchase_no}%");
        }
        if (isset($_GET['sku']) && $_GET['sku']) {
            $id_phurchase = M('PurchaseProduct')->alias('pp')
                ->field('id_purchase')
                ->join('__PRODUCT_SKU__ ps on ps.id_product_sku = pp.id_product_sku')
                ->where(array('sku' => $_GET['sku']))
                ->getField('id_purchase', true);
            $new = '';
            foreach ($id_phurchase as $key => $v) {
                $new .= 'rg.id_purchase = ' . $v . ' OR ';
            }
            if (!empty($id_phurchase)) {
                $where[] = substr($new, 0, -3);
            } else {
                //找不到
                $where['rg.id_purchase'] = -1;
            }
        }
        if (isset($_GET['purchase_no']) && $_GET['purchase_no']) {
            $purchase_no = trim($_GET['purchase_no']);
            $where['rg.purchase_no'] = array('LIKE', "%{$purchase_no}%");
        }
        if (isset($_GET['receive_person']) && $_GET['receive_person']) {
            $receive_person = trim($_GET['receive_person']);
            $where['rg.receive_person'] = array('LIKE', "%{$receive_person}%");
        }
        if (isset($_GET['phone']) && $_GET['phone']) {
            $where['rg.phone'] = array('EQ', $_GET['phone']);
        }
        if (isset($_GET['address']) && $_GET['address']) {
            $address = trim($_GET['address']);
            $where['rg.address'] = array('LIKE', "%{$address}%");
        }
        if (isset($_GET['collection_status']) && $_GET['collection_status'] != 0) {
            $where['rg.collection_status'] = array('EQ', $_GET['collection_status']);
        }
        if (isset($_GET['express_id']) && $_GET['express_id'] != 0) {
            $where['rg.express_id'] = array('EQ', $_GET['express_id']);
        }
        if (isset($_GET['track_number']) && $_GET['track_number']) {
            $where['rg.track_number'] = array('EQ', $_GET['track_number']);
        }
        if (isset($_GET['warehouse_status']) && $_GET['warehouse_status'] != 0) {
            $where['rg.warehouse_status'] = array('EQ', $_GET['warehouse_status']);
        }
        $createAtArray = array();
        if (isset($_GET['start_time']) && $_GET['start_time']) {
            $createAtArray[] = array('EGT', $_GET['start_time']);
            if ($_GET['end_time']) {
                $createAtArray[] = array('LT', $_GET['end_time']);
            }
        } else {
            $createAtArray[] = array('EGT', date('Y-m-d', strtotime('-7 days')));
            $createAtArray[] = array('LT', date('Y-m-d', strtotime('+1 day')));
        }
        if (!empty($createAtArray)) {
            $where['rg.return_time'] = $createAtArray;
        }

        $lists = $this->ReturnGoods->alias('rg')
            ->field('rg.*,pi.price_shipping as pur_price_shipping,pi.price as pur_price')
            ->join('__PURCHASE_IN__ pi on pi.id_purchasein = rg.id_purchasein', 'LEFT')
            ->where($where)->order('id_return DESC')->select();

        //产品SKU信息、采购员、部门名称  liuruibin 20171108
        foreach ($lists as $key => $list) {
            $wherePro['rgi.id_return_goods'] = $list['id_return'];
            $lists[$key]['return_product'] = M('ReturnGoodsItem')->alias('rgi')
                ->field('rgi.*,ps.sku')
                ->join('__PRODUCT_SKU__ as ps on ps.id_product_sku = rgi.id_product_sku', 'LEFT')
                ->where($wherePro)->select();
            $lists[$key]['user_nicename'] = M('Users')->where(array('id' => $list['id_users']))->getField('user_nicename');
            $lists[$key]['department_title'] = M('Department')->where(array('id_department' => $list['id_department']))->getField('title');
        }
        //退货审核状态  liuruibin 20171108
        $_status = ReturnGoodsModel::$purchase_status;
        //仓库审核状态  liuruibin 20171108
        $warehouse_status = ReturnGoodsModel::$warehouse_status;
        foreach ($lists as $p) {
            //退货订单列表，导出信息列，包括仓库审核状态和运单信息  liuruibin 20171108
            if ($export_type == 'return_list') {
                $data[] = array(
                    $p['id_return'],$p['purchase_no'], $p['inner_purchase_no'], $p['alibaba_no'], $p['return_time'], $p['department_title'], $p['user_nicename'],
                    $p['return_product'], '', '', $p['pur_price_shipping'], $p['pur_price'], '', '', $p['total_qty'], $p['total_price'], $p['qty_true'],
                    $_status[$p['purchase_status']], $warehouse_status[$p['warehouse_status']], $p['freight_price'], $p['express_name'], $p['track_number'], $p['receive_person'],
                    $p['phone'], $p['address'], $p['remark_purchase']
                );
            }
            //退货审核列表，导出信息列  liuruibin 20171108
            if ($export_type == 'pending_list') {
                $data[] = array(
                    $p['id_return'],$p['purchase_no'], $p['inner_purchase_no'], $p['alibaba_no'], $p['return_time'], $p['department_title'], $p['user_nicename'],
                    $p['return_product'], '', '', $p['pur_price_shipping'], $p['pur_price'], '', '', $p['total_qty'], $p['total_price'], $p['receive_person'],
                    $p['phone'], $p['address'], $p['remark_purchase']
                );
            }
        }
        if ($data) {
            $k = 2;
            $num = 2;
            $sum = 2;
            foreach ($data as $kk => $items) {
                $j = 65;
                $count = count($items[7]);
                if ($count > 1) {
                    $excel->getActiveSheet()->mergeCells("A" . ($num ? $num : $idx) . ":" . "A" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("B" . ($num ? $num : $idx) . ":" . "B" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("C" . ($num ? $num : $idx) . ":" . "C" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("D" . ($num ? $num : $idx) . ":" . "D" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("E" . ($num ? $num : $idx) . ":" . "E" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("F" . ($num ? $num : $idx) . ":" . "F" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("G" . ($num ? $num : $idx) . ":" . "G" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("K" . ($num ? $num : $idx) . ":" . "K" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("L" . ($num ? $num : $idx) . ":" . "L" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("O" . ($num ? $num : $idx) . ":" . "O" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("P" . ($num ? $num : $idx) . ":" . "P" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("Q" . ($num ? $num : $idx) . ":" . "Q" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("R" . ($num ? $num : $idx) . ":" . "R" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("S" . ($num ? $num : $idx) . ":" . "S" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("T" . ($num ? $num : $idx) . ":" . "T" . (($num ? $num : $idx) + $count - 1));
                    //退货单列表，显示仓库审核状态和运单信息列  liuruibin 20171108
                    if ($export_type == 'return_list') {
                        $excel->getActiveSheet()->mergeCells("U" . ($num ? $num : $idx) . ":" . "U" . (($num ? $num : $idx) + $count - 1));
                        $excel->getActiveSheet()->mergeCells("V" . ($num ? $num : $idx) . ":" . "V" . (($num ? $num : $idx) + $count - 1));
                        $excel->getActiveSheet()->mergeCells("W" . ($num ? $num : $idx) . ":" . "W" . (($num ? $num : $idx) + $count - 1));
                        $excel->getActiveSheet()->mergeCells("X" . ($num ? $num : $idx) . ":" . "X" . (($num ? $num : $idx) + $count - 1));
                        $excel->getActiveSheet()->mergeCells("Y" . ($num ? $num : $idx) . ":" . "Y" . (($num ? $num : $idx) + $count - 1));
                        $excel->getActiveSheet()->mergeCells("Z" . ($num ? $num : $idx) . ":" . "Z" . (($num ? $num : $idx) + $count - 1));
                    }
                    $num = (($num ? $num : $idx) + $count);
                } else {
                    $num += 1;
                }
                foreach ($items as $key => $col) {

                    if (is_array($col)) {

                        $a = 0;
                        foreach ($col as $c) {
                            $excel->getActiveSheet()->setCellValue('H' . $sum, $c['sku']);
                            $excel->getActiveSheet()->setCellValue('I' . $sum, $c['quantity']);
                            $excel->getActiveSheet()->setCellValue('J' . $sum, $c['price']);

                            $excel->getActiveSheet()->setCellValue('M' . $sum, $c['quantity']);
                            $excel->getActiveSheet()->setCellValue('N' . $sum, $c['price']);
                            $a++;
                            $sum = $sum + 1;
                        }
                    } else {
                        $bb = $sum;
                        if (($key > 6 && $key < 12) || $key > 13) {
                            $bb = $sum - $count;
                        }
                        if (!in_array($key, [7, 8, 9, 12, 13])) {
                            if (in_array($key, array(1, 3))) {
                                $excel->getActiveSheet()->setCellValueExplicit(chr($j) . $bb, $col);
                            } else {
                                $excel->getActiveSheet()->setCellValue(chr($j) . $bb, $col);
                            }
                        }
                    }
                    ++$j;
                }
                ++$idx;
                ++$k;
            }
        }
        add_system_record(sp_get_current_admin_id(), 7, 4, '退货订单列表');
        $excel->getActiveSheet()->setTitle(date('Y-m-d') . '退货订单列表信息.xlsx');
        $excel->setActiveSheetIndex(0);
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . date('Y-m-d') . '退货订单列表信息.xlsx"');
        header('Cache-Control: max-age=0');
        $writer = \PHPExcel_IOFactory::createWriter($excel, 'Excel2007');
        $writer->save('php://output');
        exit();

    }

    /**
     * 查看采购单退货信息    liuruibin   20171110
     */
    public function get_return_info()
    {
        $id = isset($_GET['id']) ? intval($_GET['id']) : '';
        if (!$id) {
            $this->error("参数ID不能为空");
        }
        $reGoodsInfo = $this->ReturnGoods->find($id);
        if ($reGoodsInfo['id_purchasein']) {
            $model = new \Think\Model;
            $proTb = D("Common/Product")->getTableName();
            $reGoodsItemTb = D("Common/ReturnGoodsItem")->getTableName();
            $reGoodsPro = $model->table($reGoodsItemTb . ' AS ri INNER JOIN ' . $proTb . ' AS p ON ri.id_product=p.id_product')
                ->field('ri.*,p.title,p.thumbs,p.inner_name')->where('ri.id_return_goods=' . $reGoodsInfo['id_return'])->select();
            $reGoodsInfo['purchasein_time'] = $this->PurchaseIn->where('id_purchasein = ' . $reGoodsInfo['id_purchasein'])->getField('created_at');
            foreach ($reGoodsPro as $key => $item) {
                //获取SKU liuruibin 20171110
                $get_model = D("Common/ProductSku")->find($item['id_product_sku']);
                $reGoodsPro[$key]['sku'] = $get_model['sku'];
                $reGoodsPro[$key]['barcode'] = $get_model['barcode'];
                //获取SKU在途量、库存量、实际可用库存量(库存量-在单量) liuruibin   20171110
                $get_warehouse_product = D('WarehouseProduct')->where('id_product_sku = ' . $item['id_product_sku'])->find();
                $reGoodsPro[$key]['reality_quantity'] = $get_warehouse_product['quantity'];
                $reGoodsPro[$key]['road_num'] = $get_warehouse_product['road_num'];
                $reGoodsPro[$key]['available_quantity'] = $get_warehouse_product['quantity'] - $get_warehouse_product['qty_preout'];
            }
        }
        $supplier_name = M('Supplier')->field('title,supplier_url')->where(array('id_supplier' => $reGoodsInfo['id_supplier']))->find();
        $departments = array_column(SearchData::search()['departments'], 'title', 'id_department');
        $warehouses = array_column(SearchData::search()['warehouses'], 'title', 'id_warehouse');
        $warehouse_status = ReturnGoodsModel::$warehouse_status;
        $return_type = ReturnGoodsModel::$return_type;
        $data = $reGoodsInfo;
        $this->assign(compact('data', 'reGoodsPro', 'warehouses', 'warehouse_status', 'departments', 'supplier_name', 'return_type'));
        $this->display();
    }

    /**
     * 采购确认退货列表
     */
    public function confirm_return()
    {
        //默认查询已退货的信息
        $where['rg.warehouse_status'] = 2;
        if (isset($_GET['id_department']) && $_GET['id_department']) {
            $where['rg.id_department'] = array('EQ', $_GET['id_department']);
        }
        if (isset($_GET['id_return']) && $_GET['id_return']) {
            $where['rg.id_return'] = array('EQ', $_GET['id_return']);
        }
        if (isset($_GET['id_warehouse']) && $_GET['id_warehouse']) {
            $where['rg.id_warehouse'] = array('EQ', $_GET['id_warehouse']);
        }
        if (isset($_GET['return_type']) && $_GET['return_type']) {
            $where['rg.return_type'] = array('EQ', $_GET['return_type']);
        }
        if (isset($_GET['receive_person']) && $_GET['receive_person']) {
            $where['rg.receive_person'] = array('EQ', $_GET['receive_person']);
        }

        if (isset($_GET['shipping_no']) && $_GET['shiprgng_no']) {
            $where['rg.shipping_no'] = array('EQ', $_GET['shipping_no']);
        }
        if (isset($_GET['track_number']) && $_GET['track_number']) {
            $where['rg.track_number'] = array('EQ', $_GET['track_number']);
        }
        if (isset($_GET['phone']) && $_GET['phone']) {
            $where['rg.phone'] = array('EQ', $_GET['phone']);
        }


        if (isset($_GET['purchase_no']) && $_GET['purchase_no']) {
            $purchase_no = trim($_GET['purchase_no']);
            $where['rg.purchase_no'] = array('like', "%{$purchase_no}%");
        }
        if ($_GET['alibaba_no']) {
            $alibaba_no = trim($_GET['alibaba_no']);
            $where['rg.alibaba_no'] = array('like', "%{$alibaba_no}%");
        }
        if (isset($_GET['inner_purchase_no']) && $_GET['inner_purchase_no']) {
            $inner_purchase_no = trim($_GET['inner_purchase_no']);
            $where['rg.inner_purchase_no'] = array('like', "%{$inner_purchase_no}%");
        }
        if (isset($_GET['start_time']) && $_GET['start_time']) {
            $where['rg.created_at'] = array('BETWEEN', [$_GET['start_time'], $_GET['end_time']]);
        } else {
            $new = date('Y-m-d');
            $start_time = date('Y-m-d H:i:s', strtotime($new . '-1 weeks'));
            $end_time = date($new . " 23:59:59");
            $_GET['start_time'] = $start_time;
            $_GET['end_time'] = $end_time;
            $where['rg.created_at'] = array('BETWEEN', [$start_time, $end_time]);
        }

        if (isset($_GET['sku']) && $_GET['sku']) {
            $id_product_sku = M('ProductSku')->where(array('sku' => trim($_GET['sku'])))->getField('id_product_sku');
            $where['id_product_sku'] = array('EQ', $id_product_sku);
        }
        $depart_id = session('department_id');
        $department = $this->ReturnGoods->getAllDepartment($depart_id);
        $users = $this->ReturnGoods->getAllUsers();
        $where['rg.purchase_status'] = 2;

        $count = M('returnGoods')->alias('rg')
            ->field("rg.*")
            ->join('__RETURN_GOODS_ITEM__ rgi ON rg.id_return = rgi.id_return_goods', 'right')
            ->join('__PRODUCT__ p ON p.id_product = rgi.id_product', 'left')
            ->where($where)
            ->order('rg.updated_at desc')
            ->group('rg.id_return')
            ->select();
        $count = count($count);
        $page = $this->page($count, 20);
        $list = $this->ReturnGoods->getAllReturnGoods($where, $page);
        $warehouse = $this->ReturnGoods->getAllWarehouse();
        $warehouse_status = ReturnGoodsModel::$warehouse_status;
        $return_type = ReturnGoodsModel::$return_type;
        $express_name = ReturnGoodsModel::$express_info;
        $this->assign(compact('department', 'users', 'list', 'warehouse', 'warehouse_status', 'return_type', 'express_name'));
        $this->assign('_get', I('get.'));
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 导出退货确认单列表
     */
    public function export_confirm()
    {
        vendor("PHPExcel.PHPExcel");
        vendor("PHPExcel.PHPExcel.IOFactory");
        vendor("PHPExcel.PHPExcel.Writer.CSV");
        $excel = new \PHPExcel();
        $idx = 2;
        $column = array(
            '退货单号','采购单号', '内部采购单号', '采购渠道订单号', '退货时间', 'SKU', '退货数量', '实际退货数量', '单价',
            '退货总数', '退货总价', '实际退货总数', '实际退货总价', '退货运费', '部门', '采购员', '仓库状态', '退货方式', '备注'
        );
        $j = 65;
        foreach ($column as $col) {
            $excel->getActiveSheet()->setCellValue(chr($j) . '1', $col);
            ++$j;
        }
        //默认查询已退货的信息
        $where['rg.warehouse_status'] = 2;
        if (isset($_GET['id_department']) && $_GET['id_department']) {
            $where['rg.id_department'] = array('EQ', $_GET['id_department']);
        }
        if (isset($_GET['id_return']) && $_GET['id_return']) {
            $where['rg.id_return'] = array('EQ', $_GET['id_return']);
        }
        if (isset($_GET['id_warehouse']) && $_GET['id_warehouse']) {
            $where['rg.id_warehouse'] = array('EQ', $_GET['id_warehouse']);
        }
        if (isset($_GET['return_type']) && $_GET['return_type']) {
            $where['rg.return_type'] = array('EQ', $_GET['return_type']);
        }

        if (isset($_GET['shipping_no']) && $_GET['shiprgng_no']) {
            $where['rg.shipping_no'] = array('EQ', $_GET['shipping_no']);
        }
        if (isset($_GET['purchase_no']) && $_GET['purchase_no']) {
            $purchase_no = trim($_GET['purchase_no']);
            $where['rg.purchase_no'] = array('like', "%{$purchase_no}%");
        }
        if ($_GET['alibaba_no']) {
            $alibaba_no = trim($_GET['alibaba_no']);
            $where['rg.alibaba_no'] = array('like', "%{$alibaba_no}%");
        }
        if (isset($_GET['inner_purchase_no']) && $_GET['inner_purchase_no']) {
            $inner_purchase_no = trim($_GET['inner_purchase_no']);
            $where['rg.inner_purchase_no'] = array('like', "%{$inner_purchase_no}%");
        }
        if (isset($_GET['start_time']) && $_GET['start_time']) {
            $where['rg.created_at'] = array('BETWEEN', [$_GET['start_time'], $_GET['end_time']]);
        } else {
            $new = date('Y-m-d');
            $start_time = date('Y-m-d H:i:s', strtotime($new . '-1 weeks'));
            $end_time = date($new . " 23:59:59");
            $_GET['start_time'] = $start_time;
            $_GET['end_time'] = $end_time;
            $where['rg.created_at'] = array('BETWEEN', [$start_time, $end_time]);
        }

        if (isset($_GET['sku']) && $_GET['sku']) {
            $id_product_sku = M('ProductSku')->where(array('sku' => trim($_GET['sku'])))->getField('id_product_sku');
            $where['id_product_sku'] = array('EQ', $id_product_sku);
        }
        $depart_id = session('department_id');
        $department = $this->ReturnGoods->getAllDepartment($depart_id);
        $users = $this->ReturnGoods->getAllUsers();
        $where['rg.purchase_status'] = 2;

        $lists = M('returnGoods')->alias('rg')
            ->field("rg.*,pk.sku,rgi.option_value,rgi.quantity,rgi.c_qty_true,rgi.c_qty,rgi.price")
            ->join('__RETURN_GOODS_ITEM__ rgi ON rg.id_return = rgi.id_return_goods', 'right')
            ->join('__PRODUCT__ p ON p.id_product = rgi.id_product', 'left')
            ->join('__PRODUCT_SKU__ pk ON pk.id_product_sku = rgi.id_product_sku', 'left')
            ->where($where)
            ->order('rg.updated_at desc')
            ->select();
        $warehouse = $this->ReturnGoods->getAllWarehouse();
        $warehouse_status = ReturnGoodsModel::$warehouse_status;
        $return_type = ReturnGoodsModel::$return_type;
        $express_name = ReturnGoodsModel::$express_info;
        $all_lists = [];

        foreach ($lists as $k => $v) {
            $all_lists[$v['id_return']]['id_return'] = $v['id_return'];
            $all_lists[$v['id_return']]['purchase_no'] = $v['purchase_no'];
            $all_lists[$v['id_return']]['id_warehouse'] = $v['id_warehouse'];
            $all_lists[$v['id_return']]['id_department'] = $v['id_department'];
            $all_lists[$v['id_return']]['id_users'] = $v['id_users'];
            $all_lists[$v['id_return']]['id_users_operate'] = $v['id_users_operate'];
            $all_lists[$v['id_return']]['id_supplier'] = $v['id_supplier'];
            $all_lists[$v['id_return']]['inner_purchase_no'] = $v['inner_purchase_no'];
            $all_lists[$v['id_return']]['alibaba_no'] = $v['alibaba_no'];
            $all_lists[$v['id_return']]['total_price'] = $v['total_price'];
            $all_lists[$v['id_return']]['total_qty'] = $v['total_qty'];
            $all_lists[$v['id_return']]['qty_true'] = $v['qty_true'];
            $all_lists[$v['id_return']]['price_true'] = $v['price_true'];
            $all_lists[$v['id_return']]['purchase_status'] = $v['purchase_status'];
            $all_lists[$v['id_return']]['warehouse_status'] = $v['warehouse_status'];
            $all_lists[$v['id_return']]['return_type'] = $v['return_type'];
            $all_lists[$v['id_return']]['return_time'] = $v['return_time'];
            $all_lists[$v['id_return']]['sku_list'][$k]['sku'] = $v['sku'];
            /*$all_lists[$v['id_return']]['sku_list'][$k]['option_value'] = $v['option_value'];
            $all_lists[$v['id_return']]['sku_list'][$k]['quantity'] = $v['quantity'];*/
            $all_lists[$v['id_return']]['sku_list'][$k]['c_qty_true'] = $v['c_qty_true'];
            $all_lists[$v['id_return']]['sku_list'][$k]['c_qty'] = $v['c_qty'];
            $all_lists[$v['id_return']]['sku_list'][$k]['price'] = $v['price'];
        }
        foreach ($all_lists as $p) {
            $data[] = array(
                $p['purchase_no'], $p['inner_purchase_no'], $p['alibaba_no'], $p['return_time'], $p['sku_list'], '', '', '', $p['total_qty'], $p['total_price'], $p['qty_true'], $p['price_true'], $p['price_shipping'], $department[$p['id_department']], $users[$p['id_users']], $warehouse_status[$p['warehouse_status']], strip_tags($return_type[$p['return_type']]), $p['remark']
            );
        }
        if ($data) {
            $k = 2;
            $num = 2;
            $sum = 2;
            foreach ($data as $kk => $items) {
                $j = 65;
                $count = count($items[5]);
                if ($count > 1) {
                    $excel->getActiveSheet()->mergeCells("A" . ($num ? $num : $idx) . ":" . "A" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("B" . ($num ? $num : $idx) . ":" . "B" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("C" . ($num ? $num : $idx) . ":" . "C" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("D" . ($num ? $num : $idx) . ":" . "D" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("E" . ($num ? $num : $idx) . ":" . "E" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("J" . ($num ? $num : $idx) . ":" . "J" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("K" . ($num ? $num : $idx) . ":" . "K" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("L" . ($num ? $num : $idx) . ":" . "L" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("M" . ($num ? $num : $idx) . ":" . "M" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("N" . ($num ? $num : $idx) . ":" . "N" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("O" . ($num ? $num : $idx) . ":" . "O" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("P" . ($num ? $num : $idx) . ":" . "P" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("Q" . ($num ? $num : $idx) . ":" . "Q" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("R" . ($num ? $num : $idx) . ":" . "R" . (($num ? $num : $idx) + $count - 1));
                    $excel->getActiveSheet()->mergeCells("T" . ($num ? $num : $idx) . ":" . "T" . (($num ? $num : $idx) + $count - 1));
                    $num = (($num ? $num : $idx) + $count);
                } else {
                    $num += 1;
                }
                foreach ($items as $key => $col) {

                    if (is_array($col)) {

                        $a = 0;
                        foreach ($col as $c) {
                            $excel->getActiveSheet()->setCellValue("F" . $sum, $c['sku']);
                            $excel->getActiveSheet()->setCellValue("G" . $sum, $c['c_qty']);
                            $excel->getActiveSheet()->setCellValue("H" . $sum, $c['c_qty_true']);
                            $excel->getActiveSheet()->setCellValue("I" . $sum, $c['price']);
                            $a++;
                            $sum = $sum + 1;
                        }
                    } else {
                        $bb = $sum;
                        if ($key > 7) {
                            $bb = $sum - $count;
                        }
                        if (!in_array($key, [4, 5, 6, 7,])) {
                            if (in_array($key, array(0, 2))) {
                                $excel->getActiveSheet()->setCellValueExplicit(chr($j) . $bb, $col);
                            } else {
                                $excel->getActiveSheet()->setCellValue(chr($j) . $bb, $col);
                            }
                        }
                    }
                    ++$j;//横
                }
                ++$idx;//列
                ++$k;
            }
        }
        add_system_record(sp_get_current_admin_id(), 7, 4, '导出退货单列表');
        $excel->getActiveSheet()->setTitle(date('Y-m-d') . '创建退货单列表信息.xlsx');
        $excel->setActiveSheetIndex(0);
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . date('Y-m-d') . '创建退货单列表信息.xlsx"');
        header('Cache-Control: max-age=0');
        $writer = \PHPExcel_IOFactory::createWriter($excel, 'Excel2007');
        $writer->save('php://output');
        exit();
    }
}
